type UserProfile {
    id: ID!
    user_id: ID!
    nama_lengkap: String!
    nrp: String
    alamat: String
    foto: String
    bagian_id: Int
    level_id: Int
    status_id: Int
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    user: User @belongsTo
    bagian: Bagian @belongsTo
    level: Level @belongsTo
    status: Status @belongsTo
}

input CreateUserProfileInput {
    user_id: ID!
    nama_lengkap: String!
    nrp: String
    alamat: String
    foto: String
    bagian_id: Int
    level_id: Int
    status_id: Int
}

input UpdateUserProfileInput{
    nrp: String
    nama_lengkap:String
    alamat: String
    foto: String
}

extend type Query {
    # ambil semua user profile (yang belum dihapus)
    allUserProfiles: [UserProfile!]!
    @all(model: "App\\Models\\UserProfile\\UserProfile")

    # cari berdasarkan id
    userProfile(id: ID! @eq): UserProfile
    @find(model: "App\\Models\\UserProfile\\UserProfile")
}   

extend type Mutation {
    # tambah data
    createUserProfile(input: CreateUserProfileInput! @spread): UserProfile
    @create(model: "App\\Models\\UserProfile\\UserProfile")

    # ubah data
    updateUserProfile(
        id: ID! @eq,
        input: UpdateUserProfileInput! @spread
        ): UserProfile
    @update(model: "App\\Models\\UserProfile\\UserProfile")

    deleteUserProfile(id: ID! @eq): UserProfile
    @delete(model: "App\\Models\\UserProfile\\UserProfile")

    restoreUserProfile(id: ID!): UserProfile
    @field(resolver: "App\\GraphQL\\UserProfile\\Mutations\\UserProfileMutation@restore")

    forceDeleteUserProfile(id: ID!): UserProfile
    @field(resolver: "App\\GraphQL\\UserProfile\\Mutations\\UserProfileMutation@forceDelete")
}