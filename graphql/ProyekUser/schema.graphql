type ProyekUser {
    id: ID!
    users_profile_id: ID!
    proyek_id: ID!
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime

    userProfile: UserProfile @belongsTo
    proyek: Proyek @belongsTo
}

input CreateProyekUserInput {
    users_profile_id: ID!
    proyek_id: ID!
}

input UpdateProyekUserInput {
    users_profile_id: ID
    proyek_id: ID
}

extend type Query {
    allProyekUser: [ProyekUser!]!
    @all(model: "App\\Models\\ProyekUser\\ProyekUser")

    ProyekUser(id: ID! @eq) : ProyekUser
    @find(model: "App\\Models\\ProyekUser\\ProyekUser")
}

extend type Mutation {
    # tambah data
    createProyekUser(input: CreateProyekUserInput! @spread): ProyekUser
    @create(model: "App\\Models\\ProyekUser\\ProyekUser")

    # ubah data
    updateProyekUser(
        id: ID! @eq,
        input: UpdateProyekUserInput! @spread
        ): ProyekUser
    @update(model: "App\\Models\\ProyekUser\\ProyekUser")

    deleteProyekUser(id: ID! @eq): ProyekUser
    @delete(model: "App\\Models\\ProyekUser\\ProyekUser")

    restoreProyekUser(id: ID!): ProyekUser
    @field(resolver: "App\\GraphQL\\ProyekUser\\Mutations\\ProyekUserMutation@restore")

    forceDeleteProyekUser(id: ID!): ProyekUser
    @field(resolver: "App\\GraphQL\\ProyekUser\\Mutations\\ProyekUserMutation@forceDelete")
}